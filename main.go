package main

//üîπ –ó–∞–¥–∞—á–∞: –ì–æ—Å—Ç–µ–≤–∞—è –∫–Ω–∏–≥–∞
//–°–æ–∑–¥–∞–π –≥–æ—Å—Ç–µ–≤—É—é –∫–Ω–∏–≥—É, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
//
//üìå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
//–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
//–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ".
//–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
//–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∏–¥–Ω—ã –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
//–î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏.

import (
	"fmt"
	"net/http"
	"text/template"
)

var m = make(map[string]string)

func handler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("index.html")

	if err != nil {
		fmt.Println("Loading error", err)
	}

	tmpl.Execute(w, m)
}

func addMesagge(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		r.ParseForm()
		name := r.Form.Get("name")
		message := r.Form.Get("message")

		if name != "" && message != "" {
			m[name] = message
			fmt.Println(m)
		} else {
			fmt.Fprintln(w, "Add message or name!")
		}
	}

	http.Redirect(w, r, "/", http.StatusSeeOther)

}

func deleteMesagge(w http.ResponseWriter, r *http.Request) {
	if r.Method == http.MethodPost {
		clear(m)
		fmt.Println(m)
	}
	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func main() {

	http.HandleFunc("/", handler)
	http.HandleFunc("/send", addMesagge)
	http.HandleFunc("/clear", deleteMesagge)

	fmt.Println("Listening on port 8080")
	err := http.ListenAndServe(":8080", nil)

	if err != nil {
		fmt.Println("Download error", err)
	}
}
